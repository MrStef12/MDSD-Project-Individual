/*
 * generated by Xtext 2.13.0
 */
package dk.sdu.mmmi.mdsd.project.scoping

import dk.sdu.mmmi.mdsd.project.dSL.DSLPackage.Literals
import dk.sdu.mmmi.mdsd.project.dSL.Property
import dk.sdu.mmmi.mdsd.project.dSL.StateAt
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.mmmi.mdsd.project.dSL.StatePickedUp
import dk.sdu.mmmi.mdsd.project.dSL.Pickupable

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DSLScopeProvider extends AbstractDSLScopeProvider {
	override getScope(EObject context, EReference reference) {
		if(context instanceof StateAt && reference == Literals.STATE_AT__PICKUPABLE) {
			val rootElement = EcoreUtil2.getRootContainer(context)
			val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Pickupable)
			return Scopes.scopeFor(candidates)
		}
		
		if(context instanceof StatePickedUp && reference == Literals.STATE_PICKED_UP__PROP) {
			val rootElement = EcoreUtil2.getRootContainer(context)
			val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Property)
			return Scopes.scopeFor(candidates)
		}
		return super.getScope(context, reference)
	}	
}
