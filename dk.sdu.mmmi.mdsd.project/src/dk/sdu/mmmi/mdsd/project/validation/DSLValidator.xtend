/*
 * generated by Xtext 2.13.0
 */
package dk.sdu.mmmi.mdsd.project.validation

import org.eclipse.xtext.EcoreUtil2
import dk.sdu.mmmi.mdsd.project.dSL.DSLPackage.Literals
import org.eclipse.xtext.validation.Check
import dk.sdu.mmmi.mdsd.project.dSL.Pickupable
import dk.sdu.mmmi.mdsd.project.dSL.UntilRobot
import dk.sdu.mmmi.mdsd.project.dSL.Robot

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DSLValidator extends AbstractDSLValidator {
	

	public static val INVALID_NAME = 'Another shelf with the same name already exists';
	public static val INVALID_TERMINATABLE = "Two terminatables handlers can't have the same name";
	
	@Check(FAST)
	def checkNames(Pickupable s) {
		val container = EcoreUtil2.getRootContainer(s);
		val cand = EcoreUtil2.getAllContentsOfType(container, Pickupable);
		
		for (Pickupable myS : cand) {
			
			if (s != myS) {
				if (s.name.equals(myS.name)) {
					error(INVALID_NAME,  Literals.AREA_ITEM__NAME);
				}
			}

		}
	}
	
	@Check
	def checkWaitIsNotItself(UntilRobot untilRobot) {
		val robot = EcoreUtil2.getContainerOfType(untilRobot, Robot);
		if (robot === untilRobot.robot) {
			error('Robot cannot wait for itself', Literals.UNTIL_ROBOT__ROBOT)
		}
	}
}
